# Документация для разработчиков Telegram-бота

## Обзор проекта

Этот проект представляет собой Telegram-бота для управления каталогом товаров с системой учета пользователей, их рейтинга и товаров. Бот построен на фреймворке aiogram 3.x и использует SQLite в качестве базы данных.

## Структура проекта

```
app/
├── src/
│   ├── bot/
│   │   ├── assets/          # Ресурсы бота (клавиатуры, медиафайлы)
│   │   │   └── keyboard.py  # Генераторы клавиатур
│   │   ├── handlers/        # Обработчики команд
│   │   │   ├── start.py     # Обработчик /start
│   │   │   ├── help.py      # Обработчик /help
│   │   │   ├── catalog.py   # Обработчик /catalog
│   │   │   └── products.py  # Обработчики товаров
│   │   ├── middlewares/     # Промежуточное ПО
│   │   │   ├── error_middleware.py # Обработка ошибок
│   │   │   └── db_middleware.py    # Работа с БД
│   │   ├── models.py        # Модели базы данных
│   │   ├── bot.py           # Основной файл бота
│   │   └── config.py        # Конфигурация приложения
│   └── miniapp/             # (Зарезервировано для будущего использования)
├── tests/                   # Тесты
│   ├── test_start.py        # Тесты start handler
│   └── test_keyboard.py     # Тесты клавиатур
├── .env                     # Конфигурация окружения
├── requirements.txt         # Зависимости
├── bot.db                   # Файл базы данных (создается автоматически)
└── run.py                   # Точка входа
```

## Основные компоненты

### 1. Запуск бота

**run.py** - главный исполняемый файл, который запускает бота. Обрабатывает критические ошибки и остановку пользователем.

### 2. Конфигурация

**config.py** - содержит настройки приложения:
- `BOT_TOKEN` - токен бота из .env
- `LOG_LEVEL` - уровень логирования (по умолчанию INFO)
- `DATABASE_URL` - URL базы данных

### 3. Основной модуль бота

**bot.py** - инициализирует и настраивает бота:
- Настройка логирования
- Создание экземпляров Bot и Dispatcher
- Регистрация middleware
- Подключение роутеров
- Запуск polling

### 4. База данных

**models.py** - определяет структуру БД:
- Таблица `users` с полями:
  - `telegram_id` - ID пользователя в Telegram
  - `registration_date` - дата регистрации
  - `rating` - рейтинг пользователя
  - `products` - список товаров (в формате JSON)

### 5. Middleware

- **error_middleware.py** - перехватывает и логирует ошибки
- **db_middleware.py** - предоставляет доступ к сессии БД для хендлеров

### 6. Обработчики (handlers)

Каждый обработчик в своей папке:
- **start.py** - обработка /start, регистрация пользователя
- **help.py** - обработка /help
- **catalog.py** - работа с каталогом
- **products.py** - управление товарами пользователя

### 7. Клавиатуры

**keyboard.py** - генераторы клавиатур:
- `get_mainkeyboard()` - главное меню
- `get_helpkeyboard()` - меню помощи
- `get_catalog()` - клавиатура каталога

## Логика работы

1. Пользователь запускает бота командой /start
2. Бот проверяет наличие пользователя в БД, при необходимости регистрирует
3. Пользователь получает главное меню
4. Все действия пользователя логируются
5. Ошибки перехватываются и обрабатываются error middleware

## Настройка окружения

1. Установите зависимости:
```bash
pip install -r requirements.txt
```

2. Создайте файл .env в корне проекта:
```env
BOT_TOKEN=your_bot_token_here
LOG_LEVEL=DEBUG  # Опционально
```

3. Запустите бота:
```bash
python run.py
```

## Тестирование

Для запуска тестов:
```bash
pytest tests/
```

## Планы по развитию (TODO)

### 1. Улучшение системы товаров

- [ ] Добавить категории товаров
- [ ] Реализовать полноценный CRUD для товаров
- [ ] Добавить изображения товаров
- [ ] Реализовать поиск по товарам

### 2. Система рейтинга

- [ ] Добавить команду /rate для оценки пользователей
- [ ] Реализовать систему отзывов
- [ ] Добавить топ пользователей по рейтингу

### 3. Административные функции

- [ ] Добавить панель администратора
- [ ] Реализовать модерацию товаров
- [ ] Добавить статистику использования бота

### 4. Технические улучшения

- [ ] Добавить миграции с помощью Alembic
- [ ] Реализовать кеширование часто запрашиваемых данных
- [ ] Добавить систему очередей для фоновых задач
- [ ] Реализовать веб-интерфейс для администрирования

### 5. Документация

- [ ] Добавить Swagger-документацию для API
- [ ] Создать руководство пользователя
- [ ] Добавить примеры использования

## Рекомендации по разработке

1. Для новых функций создавайте отдельные ветки git
2. Тестируйте изменения перед мерджем в main
3. Используйте логирование для отладки
4. Для сложных операций с БД добавляйте транзакции
5. Сохраняйте обратную совместимость при изменении API

## Экстренные ситуации

При критических ошибках:
1. Бот попытается отправить сообщение пользователю
2. Ошибка будет записана в лог (logs/bot.log)
3. При повторных ошибках бот остановится

Для мониторинга проверяйте:
- Размер файла логов
- Наличие свободного места
- Загрузку системы