# Документация Telegram бота

## Оглавление
1. [Обзор проекта](#обзор-проекта)
2. [Структура проекта](#структура-проекта)
3. [Настройка окружения](#настройка-окружения)
4. [Запуск проекта](#запуск-проекта)
5. [Архитектура](#архитектура)
6. [Логирование](#логирование)
7. [Обработка ошибок](#обработка-ошибок)
8. [Тестирование](#тестирование)
9. [Рекомендации по разработке](#рекомендации-по-разработке)
10. [Часто задаваемые вопросы](#часто-заваемые-вопросы)

## Обзор проекта

Это Telegram бот, разработанный на фреймворке aiogram (версия 3.x). Бот предоставляет следующие функции:
- Стартовое меню (/start)
- Система помощи (/help)
- Каталог товаров (/catalog)

Проект использует современные практики разработки:
- Разделение кода по функциональности
- Логирование вместо print
- Переменные окружения для конфигурации
- Middleware для обработки ошибок
- Полноценная система тестирования

## Структура проекта

```
app/
├── src/
│   ├── bot/
│   │   ├── assets/          # Ресурсы (клавиатуры, медиа)
│   │   ├── handlers/        # Обработчики команд
│   │   ├── middlewares/     # Промежуточное ПО
│   │   ├── bot.py           # Основной файл бота
│   │   └── config.py        # Конфигурация
│   └── miniapp/             # (Зарезервировано для будущего использования)
├── tests/                   # Тесты
├── .env                     # Конфигурация окружения
└── run.py                   # Точка входа
```

## Настройка окружения

1. Установите Python 3.9+
2. Установите зависимости:
   ```bash
   pip install -r requirements.txt
   ```
3. Создайте файл `.env` в корне проекта:
   ```ini
   BOT_TOKEN=ваш_токен_от_BotFather
   LOG_LEVEL=INFO  # DEBUG для разработки
   ```
4. Для разработки рекомендуется использовать виртуальное окружение:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate     # Windows
   ```

## Запуск проекта

1. Основной запуск:
   ```bash
   python run.py
   ```
2. В режиме разработки с hot-reload (требуется `uvicorn`):
   ```bash
   uvicorn run:app --reload
   ```
3. Запуск тестов:
   ```bash
   pytest tests/
   ```

## Архитектура

### Основные компоненты

1. **Роутеры** - обработчики команд, разделенные по функционалу:
   - `start.py` - команда /start
   - `help.py` - команда /help
   - `catalog.py` - команда /catalog

2. **Middleware**:
   - `error_middleware.py` - централизованная обработка ошибок

3. **Клавиатуры**:
   - `keyboard.py` - фабрики клавиатур

### Жизненный цикл запроса

1. Пользователь отправляет сообщение
2. Middleware перехватывает запрос
3. Сообщение передается в соответствующий роутер
4. Обработчик формирует ответ
5. Ответ отправляется пользователю
6. Ошибки логируются и обрабатываются

## Логирование

Проект использует встроенный модуль `logging` с ротацией логов.

Уровни логирования:
- `DEBUG` - детальная информация для разработки
- `INFO` - основная информация о работе
- `ERROR` - ошибки в работе
- `CRITICAL` - критические ошибки

Логи сохраняются в папке `logs/` с ротацией (макс. 5 файлов по 1MB каждый).

Пример использования:
```python
import logging

logger = logging.getLogger(__name__)

logger.debug("Отладочная информация")
logger.info("Информационное сообщение")
logger.error("Ошибка в обработке")
```

## Обработка ошибок

Ошибки обрабатываются централизованно через middleware:
1. Все необработанные исключения перехватываются
2. Ошибка логируется с полным стектрейсом
3. Пользователь получает понятное сообщение об ошибке
4. Система продолжает работу

Для добавления специальной обработки ошибок:
```python
@router.error()
async def custom_error_handler(event: ErrorEvent):
    # Специальная обработка
```

## Тестирование

Проект включает unit-тесты:
- Тесты обработчиков команд
- Тесты клавиатур
- Интеграционные тесты

Запуск всех тестов:
```bash
pytest tests/
```

Запуск конкретного теста:
```bash
pytest tests/test_handlers/test_start.py -v
```

### Моки и фикстуры

В `conftest.py` определены общие фикстуры:
- `bot` - мок Telegram бота
- `dp` - диспетчер для тестов
- `storage` - хранилище состояний

Пример теста:
```python
async def test_start_handler(bot, dp):
    # Подготовка
    message = types.Message(...)
    
    # Вызов
    await dp.feed_update(bot, message)
    
    # Проверки
    # ...
```

## Рекомендации по разработке

1. **Стиль кода**:
   - PEP 8
   - Docstrings для всех публичных методов
   - Типизация (type hints)

2. **Коммиты**:
   - Conventional Commits
   - Маленькие атомарные коммиты

3. **Workflow**:
   1. Создайте feature-ветку
   2. Напишите тесты
   3. Реализуйте функционал
   4. Проверьте тесты
   5. Создайте pull request

4. **Добавление новой команды**:
   1. Создайте файл в `handlers/`
   2. Реализуйте роутер
   3. Добавьте импорт в `bot.py`
   4. Напишите тесты

## Часто задаваемые вопросы

**Q: Где получить токен бота?**
A: Через @BotFather в Telegram

**Q: Как добавить новую команду?**
1. Создайте файл в `handlers/`
2. Реализуйте роутер (см. примеры)
3. Добавьте роутер в `bot.py`

**Q: Где хранить данные пользователей?**
A: В текущей реализации используется MemoryStorage. Для продакшена рекомендуется Redis или база данных.

**Q: Как изменить текст сообщений?**
A: Тексты хранятся непосредственно в обработчиках. В будущем можно вынести в отдельный файл локализаций.

**Q: Как деплоить бота?**
A: Рекомендуемые варианты:
- Docker + Kubernetes
- Serverless (AWS Lambda, Yandex Cloud Functions)
- Виртуальная машина

Для любых вопросов обращайтесь к текущему техническому лиду проекта.